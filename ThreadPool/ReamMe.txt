【线程池设计】

	作者：钱广盼
	时间：2016年5月20日
	
一、设计缘由：

	1. 当程序需要诸多可并行执行的任务需要执行时，有必要考虑使用多线程。
	2.线程的创建与切换上下文占用大量的时间开销，有必要进行管理，不能无限制增加线程。

二、具体描述：

	1.总体设计

			线程池初始化一定数量的线程个数，在没有任务分派的时候，各个线程挂起，这样并不占用CPU资源，
	不会影响程序的性能。当有任务队列中有任务需要处理时，将某一线程从空闲线程链表中摘取一个线程去执行
	该任务，等该线程完成了当前任务后，去线程池中查找是否还有其他任务被派遣，若有则取之执行，若无则当前
	无需线程执行任务，那么当前线程挂起，转存至空闲线程栈中，在线程池声明周期内重复此过程。如客户端欲销
	毁线程池，先通知各线程退出，然后销毁任务队列中尚未操作的任务，此时更改线程池状态为已销毁，其他线程
	此时再往线程池中投放任务，将不做处理，并返回失败。

	2.具体设计

		(1).线程池：	线程池维护任务、忙碌线程、空闲线程三种列表具体如下：

			(a).任务队列：对于需要处理的任务，采用先来先服务算法，故采取队列存储之；
			(b).忙碌线程链表：对于忙碌线程考虑可能会频繁转化线程状态，即可能从忙碌链表中删除，添加到空闲线程栈中，
	 故采取添加删除节点效率比较高的链表结构存储之；
			(c).空闲线程栈：对于空闲线程，根据局部性原理，刚执行完的线程所占有的内存等资源还在内存中的概率比较大，
	即内存命中率高，有效的防止换页的开销，故采取栈结构存储之。

		(2).线程：	从线程池中的任务队列中取任务执行，在无任务执行时挂起。
		(3).任务：  继承统一接口，供线程池中线程调用。
		(4).临界锁：保证列表以及其他独占资源的互斥保护。